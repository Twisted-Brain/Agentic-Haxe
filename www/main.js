// Generated by Haxe 4.3.7
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var React_Component = require("react").Component;
var ChatView = function(props) {
	React_Component.call(this,props);
	this.state = { messages : [], userInput : ""};
};
ChatView.__super__ = React_Component;
ChatView.prototype = $extend(React_Component.prototype,{
	componentDidMount: function() {
	}
	,sendMessage: function() {
		var _gthis = this;
		var message = this.state.userInput;
		if(message.length == 0) {
			return;
		}
		var newMessages = this.state.messages;
		newMessages.push({ role : "user", content : message});
		this.setState({ messages : newMessages, userInput : ""});
		var req = new XMLHttpRequest();
		req.open("POST","/api/chat",true);
		req.setRequestHeader("Content-Type","application/json");
		req.onreadystatechange = function() {
			if(req.readyState == 4 && req.status == 200) {
				var response = JSON.parse(req.responseText);
				var newMessages = _gthis.state.messages;
				newMessages.push({ role : "assistant", content : response.response});
				_gthis.setState({ messages : newMessages});
			}
		};
		req.send(JSON.stringify({ message : message, model : "openai/gpt-3.5-turbo"}));
	}
	,handleKeyDown: function(e) {
		if(e.key == "Enter") {
			this.sendMessage();
		}
	}
	,handleInputChange: function(e) {
		var target = e.target;
		this.setState({ userInput : target.value});
	}
	,handleSendClick: function(e) {
		this.sendMessage();
	}
	,render: function() {
		return { $$typeof : $$tre, type : "div", props : { className : "chat-container", children : [{ $$typeof : $$tre, type : "div", props : { className : "header-bar", children : [{ $$typeof : $$tre, type : "img", props : { src : "/assets/logo.png", alt : "logo"}, key : null, ref : null},{ $$typeof : $$tre, type : "h1", props : { children : "Haxe-React Chat"}, key : null, ref : null}]}, key : null, ref : null},{ $$typeof : $$tre, type : "div", props : { className : "chat-window", children : this.renderMessages()}, key : null, ref : null},{ $$typeof : $$tre, type : "div", props : { className : "chat-input", children : [{ $$typeof : $$tre, type : "input", props : { value : this.state.userInput, type : "text", placeholder : "Type a message...", onKeyDown : $bind(this,this.handleKeyDown), onChange : $bind(this,this.handleInputChange), id : "chat-input"}, key : null, ref : null},{ $$typeof : $$tre, type : "button", props : { onClick : $bind(this,this.handleSendClick), id : "send-button", children : "Send"}, key : null, ref : null}]}, key : null, ref : null}]}, key : null, ref : null};
	}
	,renderMessages: function() {
		var elements = [];
		var _g = 0;
		var _g1 = this.state.messages;
		while(_g < _g1.length) {
			var message = _g1[_g];
			++_g;
			var p = React.createElement("p",null,[message.content]);
			var div = React.createElement("div",{ className : "message " + message.role},[p]);
			elements.push(div);
		}
		return elements;
	}
});
var Main = function() { };
Main.main = function() {
	ReactDOM.render(React.createElement(ChatView,{ }),window.document.getElementById("app"));
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var React = require("react");
var ReactDOM = require("react-dom");
var react_ReactMacro = function() { };
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
ChatView.displayName = "ChatView";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
