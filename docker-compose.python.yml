# Docker Compose for Haxe Python ML Service
version: '3.8'

services:
  haxe-python-ml:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: haxe-ml-service
    ports:
      - "8080:8080"
    environment:
      - PYTHONPATH=/app
      - ML_SERVICE_PORT=8080
      - ML_SERVICE_HOST=0.0.0.0
      - TF_CPP_MIN_LOG_LEVEL=2  # Reduce TensorFlow logging
    volumes:
      - ./models:/app/models:ro  # Mount models directory (read-only)
      - ./logs:/app/logs         # Mount logs directory
      - ./data:/app/data:ro      # Mount data directory (read-only)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Optional: Redis for caching ML results
  redis-cache:
    image: redis:7-alpine
    container_name: haxe-ml-cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: haxe-ml-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  ml-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16