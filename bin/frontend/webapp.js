// Generated by Haxe 4.3.7
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var frontend_WebAppMain = function() { };
frontend_WebAppMain.__name__ = true;
frontend_WebAppMain.main = function() {
	if(window.document.readyState == "loading") {
		window.document.addEventListener("DOMContentLoaded",frontend_WebAppMain.onDOMReady);
	} else {
		frontend_WebAppMain.onDOMReady();
	}
};
frontend_WebAppMain.onDOMReady = function() {
	wiring_ApplicationBootstrap.initialize();
	frontend_WebAppMain.logger = wiring_DependencyContainer.getLogger();
	frontend_WebAppMain.logger.info("WebApp Frontend starting...");
	frontend_WebAppMain.initializeUI();
	frontend_WebAppMain.logger.info("WebApp Frontend ready");
};
frontend_WebAppMain.initializeUI = function() {
	var statusElement = window.document.getElementById("status");
	if(statusElement != null) {
		statusElement.textContent = "Connected";
		statusElement.className = "status connected";
	}
	var sendButton = window.document.getElementById("send-button");
	var messageInput = window.document.getElementById("message-input");
	if(sendButton != null && messageInput != null) {
		sendButton.addEventListener("click",frontend_WebAppMain.sendMessage);
		messageInput.addEventListener("keypress",function(e) {
			if(e.key == "Enter") {
				frontend_WebAppMain.sendMessage();
			}
		});
	}
	frontend_WebAppMain.logger.info("UI initialized successfully");
};
frontend_WebAppMain.sendMessage = function() {
	var messageInput = window.document.getElementById("message-input");
	var responseArea = window.document.getElementById("response-area");
	if(messageInput != null && responseArea != null) {
		var message = StringTools.trim(messageInput.value);
		if(message.length > 0) {
			frontend_WebAppMain.addMessageToChat("user",message);
			messageInput.value = "";
			frontend_WebAppMain.callOpenRouterAPI(message);
		}
	}
};
frontend_WebAppMain.callOpenRouterAPI = function(userMessage) {
	var apiUrl = "/api/chat";
	var requestData = { "message" : userMessage, "model" : "anthropic/claude-3-5-sonnet-20241022"};
	var xhr = new XMLHttpRequest();
	xhr.open("POST",apiUrl,true);
	xhr.setRequestHeader("Content-Type","application/json");
	xhr.onreadystatechange = function() {
		if(xhr.readyState == 4) {
			if(xhr.status == 200) {
				try {
					var response = JSON.parse(xhr.responseText);
					var assistantMessage = response.response;
					frontend_WebAppMain.addMessageToChat("assistant",assistantMessage);
				} catch( _g ) {
					var e = haxe_Exception.caught(_g).unwrap();
					frontend_WebAppMain.addMessageToChat("system","Error parsing response: " + Std.string(e));
				}
			} else {
				frontend_WebAppMain.addMessageToChat("system","API Error: " + xhr.status + " - " + xhr.responseText);
			}
		}
	};
	xhr.send(JSON.stringify(requestData));
};
frontend_WebAppMain.addMessageToChat = function(sender,message) {
	var responseArea = window.document.getElementById("response-area");
	if(responseArea != null) {
		var messageDiv = window.document.createElement("div");
		messageDiv.className = "message " + sender + "-message";
		messageDiv.textContent = "" + sender + ": " + message;
		responseArea.appendChild(messageDiv);
		responseArea.scrollTop = responseArea.scrollHeight;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var platform_core_js_HttpClientJs = function() {
	this.headers = new haxe_ds_StringMap();
};
platform_core_js_HttpClientJs.__name__ = true;
var platform_core_js_LoggerJs = function() {
};
platform_core_js_LoggerJs.__name__ = true;
platform_core_js_LoggerJs.prototype = {
	info: function(message,context) {
		if(context != null) {
			$global.console.info(message,context);
		} else {
			$global.console.info(message);
		}
	}
};
var platform_core_js_PlatformClockJs = function() {
};
platform_core_js_PlatformClockJs.__name__ = true;
platform_core_js_PlatformClockJs.prototype = {
	nowMs: function() {
		return Date.now();
	}
};
var wiring_ApplicationBootstrap = function() { };
wiring_ApplicationBootstrap.__name__ = true;
wiring_ApplicationBootstrap.initialize = function() {
	if(wiring_ApplicationBootstrap._isInitialized) {
		return;
	}
	wiring_ApplicationBootstrap._logger = wiring_DependencyContainer.getLogger();
	wiring_ApplicationBootstrap._logger.info("ApplicationBootstrap: Starting initialization...");
	var clock = wiring_DependencyContainer.getClock();
	var httpClient = wiring_DependencyContainer.getHttpClient();
	wiring_ApplicationBootstrap._logger.info("ApplicationBootstrap: Dependencies initialized successfully");
	wiring_ApplicationBootstrap._logger.info("ApplicationBootstrap: Clock timestamp: " + clock.nowMs());
	wiring_ApplicationBootstrap._isInitialized = true;
	wiring_ApplicationBootstrap._logger.info("ApplicationBootstrap: Application ready");
};
var wiring_DependencyContainer = function() { };
wiring_DependencyContainer.__name__ = true;
wiring_DependencyContainer.getHttpClient = function() {
	if(wiring_DependencyContainer._httpClient == null) {
		wiring_DependencyContainer._httpClient = new platform_core_js_HttpClientJs();
	}
	return wiring_DependencyContainer._httpClient;
};
wiring_DependencyContainer.getLogger = function() {
	if(wiring_DependencyContainer._logger == null) {
		wiring_DependencyContainer._logger = new platform_core_js_LoggerJs();
	}
	return wiring_DependencyContainer._logger;
};
wiring_DependencyContainer.getClock = function() {
	if(wiring_DependencyContainer._clock == null) {
		wiring_DependencyContainer._clock = new platform_core_js_PlatformClockJs();
	}
	return wiring_DependencyContainer._clock;
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
wiring_ApplicationBootstrap._isInitialized = false;
frontend_WebAppMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
