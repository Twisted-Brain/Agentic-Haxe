// Generated by Haxe 4.3.7
#ifndef INCLUDED_shared_ApiModels
#define INCLUDED_shared_ApiModels

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(shared,ApiModels)

namespace shared{


class HXCPP_CLASS_ATTRIBUTES ApiModels_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ApiModels_obj OBJ_;
		ApiModels_obj();

	public:
		enum { _hx_ClassId = 0x7ff9eb77 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="shared.ApiModels")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"shared.ApiModels"); }

		inline static ::hx::ObjectPtr< ApiModels_obj > __new() {
			::hx::ObjectPtr< ApiModels_obj > __this = new ApiModels_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ApiModels_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ApiModels_obj *__this = (ApiModels_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ApiModels_obj), false, "shared.ApiModels"));
			*(void **)__this = ApiModels_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ApiModels_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ApiModels",c4,d0,06,99); }

};

} // end namespace shared

#endif /* INCLUDED_shared_ApiModels */ 
