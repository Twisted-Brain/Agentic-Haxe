// Generated by Haxe 4.3.7
#ifndef INCLUDED_shared_LlmModelHelper
#define INCLUDED_shared_LlmModelHelper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(shared,LlmModel)
HX_DECLARE_CLASS1(shared,LlmModelHelper)

namespace shared{


class HXCPP_CLASS_ATTRIBUTES LlmModelHelper_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LlmModelHelper_obj OBJ_;
		LlmModelHelper_obj();

	public:
		enum { _hx_ClassId = 0x5a262f4f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="shared.LlmModelHelper")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"shared.LlmModelHelper"); }

		inline static ::hx::ObjectPtr< LlmModelHelper_obj > __new() {
			::hx::ObjectPtr< LlmModelHelper_obj > __this = new LlmModelHelper_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< LlmModelHelper_obj > __alloc(::hx::Ctx *_hx_ctx) {
			LlmModelHelper_obj *__this = (LlmModelHelper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LlmModelHelper_obj), false, "shared.LlmModelHelper"));
			*(void **)__this = LlmModelHelper_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LlmModelHelper_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LlmModelHelper",2a,b1,80,15); }

		static ::String toString( ::shared::LlmModel model);
		static ::Dynamic toString_dyn();

		static  ::shared::LlmModel fromString(::String modelStr);
		static ::Dynamic fromString_dyn();

		static ::Array< ::Dynamic> getAllModels();
		static ::Dynamic getAllModels_dyn();

};

} // end namespace shared

#endif /* INCLUDED_shared_LlmModelHelper */ 
