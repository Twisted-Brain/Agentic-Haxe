// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_shared_LlmRequest
#include <shared/LlmRequest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_77e6d0508fdb0a00_20_new,"shared.LlmRequest","new",0x2a31629d,"shared.LlmRequest.new","shared/ApiModels.hx",20,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_77e6d0508fdb0a00_29_toJson,"shared.LlmRequest","toJson",0xc3dd5f26,"shared.LlmRequest.toJson","shared/ApiModels.hx",29,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_77e6d0508fdb0a00_38_fromJson,"shared.LlmRequest","fromJson",0x17aa4155,"shared.LlmRequest.fromJson","shared/ApiModels.hx",38,0xfd6bed64)
namespace shared{

void LlmRequest_obj::__construct(::String message,::String model, ::Dynamic __o_temperature, ::Dynamic __o_maxTokens){
            		 ::Dynamic temperature = __o_temperature;
            		if (::hx::IsNull(__o_temperature)) temperature = ((Float)0.7);
            		 ::Dynamic maxTokens = __o_maxTokens;
            		if (::hx::IsNull(__o_maxTokens)) maxTokens = 1000;
            	HX_STACKFRAME(&_hx_pos_77e6d0508fdb0a00_20_new)
HXLINE(  21)		this->message = message;
HXLINE(  22)		this->model = model;
HXLINE(  23)		this->temperature = ( (Float)(temperature) );
HXLINE(  24)		this->maxTokens = ( (int)(maxTokens) );
HXLINE(  25)		this->timestamp = ::Date_obj::now()->getTime();
            	}

Dynamic LlmRequest_obj::__CreateEmpty() { return new LlmRequest_obj; }

void *LlmRequest_obj::_hx_vtable = 0;

Dynamic LlmRequest_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LlmRequest_obj > _hx_result = new LlmRequest_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool LlmRequest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x449cc8a7;
}

::String LlmRequest_obj::toJson(){
            	HX_STACKFRAME(&_hx_pos_77e6d0508fdb0a00_29_toJson)
HXDLIN(  29)		 ::Dynamic replacer = null();
HXDLIN(  29)		::String space = null();
HXDLIN(  29)		return ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("message",c7,35,11,9a),this->message)
            			->setFixed(1,HX_("timestamp",d6,d4,ce,a5),this->timestamp)
            			->setFixed(2,HX_("maxTokens",1e,29,72,c1),this->maxTokens)
            			->setFixed(3,HX_("model",a9,23,58,0c),this->model)
            			->setFixed(4,HX_("temperature",34,b4,90,3c),this->temperature)),replacer,space);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LlmRequest_obj,toJson,return )

 ::shared::LlmRequest LlmRequest_obj::fromJson(::String json){
            	HX_GC_STACKFRAME(&_hx_pos_77e6d0508fdb0a00_38_fromJson)
HXLINE(  39)		 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,json)->doParse();
HXLINE(  40)		 ::shared::LlmRequest request =  ::shared::LlmRequest_obj::__alloc( HX_CTX ,( (::String)(data->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic)) ),( (::String)(data->__Field(HX_("model",a9,23,58,0c),::hx::paccDynamic)) ),data->__Field(HX_("temperature",34,b4,90,3c),::hx::paccDynamic),data->__Field(HX_("maxTokens",1e,29,72,c1),::hx::paccDynamic));
HXLINE(  41)		request->timestamp = ( (Float)(data->__Field(HX_("timestamp",d6,d4,ce,a5),::hx::paccDynamic)) );
HXLINE(  42)		return request;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LlmRequest_obj,fromJson,return )


::hx::ObjectPtr< LlmRequest_obj > LlmRequest_obj::__new(::String message,::String model, ::Dynamic __o_temperature, ::Dynamic __o_maxTokens) {
	::hx::ObjectPtr< LlmRequest_obj > __this = new LlmRequest_obj();
	__this->__construct(message,model,__o_temperature,__o_maxTokens);
	return __this;
}

::hx::ObjectPtr< LlmRequest_obj > LlmRequest_obj::__alloc(::hx::Ctx *_hx_ctx,::String message,::String model, ::Dynamic __o_temperature, ::Dynamic __o_maxTokens) {
	LlmRequest_obj *__this = (LlmRequest_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LlmRequest_obj), true, "shared.LlmRequest"));
	*(void **)__this = LlmRequest_obj::_hx_vtable;
	__this->__construct(message,model,__o_temperature,__o_maxTokens);
	return __this;
}

LlmRequest_obj::LlmRequest_obj()
{
}

void LlmRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LlmRequest);
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(temperature,"temperature");
	HX_MARK_MEMBER_NAME(maxTokens,"maxTokens");
	HX_MARK_MEMBER_NAME(timestamp,"timestamp");
	HX_MARK_END_CLASS();
}

void LlmRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(message,"message");
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(temperature,"temperature");
	HX_VISIT_MEMBER_NAME(maxTokens,"maxTokens");
	HX_VISIT_MEMBER_NAME(timestamp,"timestamp");
}

::hx::Val LlmRequest_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return ::hx::Val( model ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toJson") ) { return ::hx::Val( toJson_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { return ::hx::Val( message ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maxTokens") ) { return ::hx::Val( maxTokens ); }
		if (HX_FIELD_EQ(inName,"timestamp") ) { return ::hx::Val( timestamp ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"temperature") ) { return ::hx::Val( temperature ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LlmRequest_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromJson") ) { outValue = fromJson_dyn(); return true; }
	}
	return false;
}

::hx::Val LlmRequest_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { message=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maxTokens") ) { maxTokens=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timestamp") ) { timestamp=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"temperature") ) { temperature=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LlmRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("message",c7,35,11,9a));
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("temperature",34,b4,90,3c));
	outFields->push(HX_("maxTokens",1e,29,72,c1));
	outFields->push(HX_("timestamp",d6,d4,ce,a5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LlmRequest_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(LlmRequest_obj,message),HX_("message",c7,35,11,9a)},
	{::hx::fsString,(int)offsetof(LlmRequest_obj,model),HX_("model",a9,23,58,0c)},
	{::hx::fsFloat,(int)offsetof(LlmRequest_obj,temperature),HX_("temperature",34,b4,90,3c)},
	{::hx::fsInt,(int)offsetof(LlmRequest_obj,maxTokens),HX_("maxTokens",1e,29,72,c1)},
	{::hx::fsFloat,(int)offsetof(LlmRequest_obj,timestamp),HX_("timestamp",d6,d4,ce,a5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LlmRequest_obj_sStaticStorageInfo = 0;
#endif

static ::String LlmRequest_obj_sMemberFields[] = {
	HX_("message",c7,35,11,9a),
	HX_("model",a9,23,58,0c),
	HX_("temperature",34,b4,90,3c),
	HX_("maxTokens",1e,29,72,c1),
	HX_("timestamp",d6,d4,ce,a5),
	HX_("toJson",43,ad,21,7c),
	::String(null()) };

::hx::Class LlmRequest_obj::__mClass;

static ::String LlmRequest_obj_sStaticFields[] = {
	HX_("fromJson",b2,10,34,a4),
	::String(null())
};

void LlmRequest_obj::__register()
{
	LlmRequest_obj _hx_dummy;
	LlmRequest_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shared.LlmRequest",2b,d0,92,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LlmRequest_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LlmRequest_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LlmRequest_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LlmRequest_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LlmRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LlmRequest_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shared
