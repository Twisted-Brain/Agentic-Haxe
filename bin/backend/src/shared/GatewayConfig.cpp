// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_shared_GatewayConfig
#include <shared/GatewayConfig.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cb4e5d35cb2d99cc_112_new,"shared.GatewayConfig","new",0xd30509af,"shared.GatewayConfig.new","shared/ApiModels.hx",112,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_cb4e5d35cb2d99cc_121_toJson,"shared.GatewayConfig","toJson",0x8f71ef54,"shared.GatewayConfig.toJson","shared/ApiModels.hx",121,0xfd6bed64)
namespace shared{

void GatewayConfig_obj::__construct(::String apiKey,::String baseUrl,::String defaultModel, ::Dynamic __o_timeout, ::Dynamic __o_maxRetries){
            		 ::Dynamic timeout = __o_timeout;
            		if (::hx::IsNull(__o_timeout)) timeout = 30000;
            		 ::Dynamic maxRetries = __o_maxRetries;
            		if (::hx::IsNull(__o_maxRetries)) maxRetries = 3;
            	HX_STACKFRAME(&_hx_pos_cb4e5d35cb2d99cc_112_new)
HXLINE( 113)		this->apiKey = apiKey;
HXLINE( 114)		this->baseUrl = baseUrl;
HXLINE( 115)		this->defaultModel = defaultModel;
HXLINE( 116)		this->timeout = ( (int)(timeout) );
HXLINE( 117)		this->maxRetries = ( (int)(maxRetries) );
            	}

Dynamic GatewayConfig_obj::__CreateEmpty() { return new GatewayConfig_obj; }

void *GatewayConfig_obj::_hx_vtable = 0;

Dynamic GatewayConfig_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GatewayConfig_obj > _hx_result = new GatewayConfig_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool GatewayConfig_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x081c0f5d;
}

::String GatewayConfig_obj::toJson(){
            	HX_STACKFRAME(&_hx_pos_cb4e5d35cb2d99cc_121_toJson)
HXDLIN( 121)		 ::Dynamic replacer = null();
HXDLIN( 121)		::String space = null();
HXDLIN( 121)		return ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("apiKey",25,a1,1f,8b),HX_("[REDACTED]",62,61,de,2a))
            			->setFixed(1,HX_("defaultModel",28,5f,b3,c1),this->defaultModel)
            			->setFixed(2,HX_("timeout",a1,1a,f7,d8),this->timeout)
            			->setFixed(3,HX_("baseUrl",de,9b,ed,2d),this->baseUrl)
            			->setFixed(4,HX_("maxRetries",82,6f,e4,66),this->maxRetries)),replacer,space);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GatewayConfig_obj,toJson,return )


::hx::ObjectPtr< GatewayConfig_obj > GatewayConfig_obj::__new(::String apiKey,::String baseUrl,::String defaultModel, ::Dynamic __o_timeout, ::Dynamic __o_maxRetries) {
	::hx::ObjectPtr< GatewayConfig_obj > __this = new GatewayConfig_obj();
	__this->__construct(apiKey,baseUrl,defaultModel,__o_timeout,__o_maxRetries);
	return __this;
}

::hx::ObjectPtr< GatewayConfig_obj > GatewayConfig_obj::__alloc(::hx::Ctx *_hx_ctx,::String apiKey,::String baseUrl,::String defaultModel, ::Dynamic __o_timeout, ::Dynamic __o_maxRetries) {
	GatewayConfig_obj *__this = (GatewayConfig_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GatewayConfig_obj), true, "shared.GatewayConfig"));
	*(void **)__this = GatewayConfig_obj::_hx_vtable;
	__this->__construct(apiKey,baseUrl,defaultModel,__o_timeout,__o_maxRetries);
	return __this;
}

GatewayConfig_obj::GatewayConfig_obj()
{
}

void GatewayConfig_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GatewayConfig);
	HX_MARK_MEMBER_NAME(apiKey,"apiKey");
	HX_MARK_MEMBER_NAME(baseUrl,"baseUrl");
	HX_MARK_MEMBER_NAME(defaultModel,"defaultModel");
	HX_MARK_MEMBER_NAME(timeout,"timeout");
	HX_MARK_MEMBER_NAME(maxRetries,"maxRetries");
	HX_MARK_END_CLASS();
}

void GatewayConfig_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(apiKey,"apiKey");
	HX_VISIT_MEMBER_NAME(baseUrl,"baseUrl");
	HX_VISIT_MEMBER_NAME(defaultModel,"defaultModel");
	HX_VISIT_MEMBER_NAME(timeout,"timeout");
	HX_VISIT_MEMBER_NAME(maxRetries,"maxRetries");
}

::hx::Val GatewayConfig_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"apiKey") ) { return ::hx::Val( apiKey ); }
		if (HX_FIELD_EQ(inName,"toJson") ) { return ::hx::Val( toJson_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"baseUrl") ) { return ::hx::Val( baseUrl ); }
		if (HX_FIELD_EQ(inName,"timeout") ) { return ::hx::Val( timeout ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxRetries") ) { return ::hx::Val( maxRetries ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultModel") ) { return ::hx::Val( defaultModel ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GatewayConfig_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"apiKey") ) { apiKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"baseUrl") ) { baseUrl=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeout") ) { timeout=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxRetries") ) { maxRetries=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultModel") ) { defaultModel=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GatewayConfig_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("apiKey",25,a1,1f,8b));
	outFields->push(HX_("baseUrl",de,9b,ed,2d));
	outFields->push(HX_("defaultModel",28,5f,b3,c1));
	outFields->push(HX_("timeout",a1,1a,f7,d8));
	outFields->push(HX_("maxRetries",82,6f,e4,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GatewayConfig_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(GatewayConfig_obj,apiKey),HX_("apiKey",25,a1,1f,8b)},
	{::hx::fsString,(int)offsetof(GatewayConfig_obj,baseUrl),HX_("baseUrl",de,9b,ed,2d)},
	{::hx::fsString,(int)offsetof(GatewayConfig_obj,defaultModel),HX_("defaultModel",28,5f,b3,c1)},
	{::hx::fsInt,(int)offsetof(GatewayConfig_obj,timeout),HX_("timeout",a1,1a,f7,d8)},
	{::hx::fsInt,(int)offsetof(GatewayConfig_obj,maxRetries),HX_("maxRetries",82,6f,e4,66)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GatewayConfig_obj_sStaticStorageInfo = 0;
#endif

static ::String GatewayConfig_obj_sMemberFields[] = {
	HX_("apiKey",25,a1,1f,8b),
	HX_("baseUrl",de,9b,ed,2d),
	HX_("defaultModel",28,5f,b3,c1),
	HX_("timeout",a1,1a,f7,d8),
	HX_("maxRetries",82,6f,e4,66),
	HX_("toJson",43,ad,21,7c),
	::String(null()) };

::hx::Class GatewayConfig_obj::__mClass;

void GatewayConfig_obj::__register()
{
	GatewayConfig_obj _hx_dummy;
	GatewayConfig_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shared.GatewayConfig",3d,06,dd,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GatewayConfig_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GatewayConfig_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GatewayConfig_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GatewayConfig_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shared
