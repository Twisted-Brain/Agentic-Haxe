// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_shared_LlmResponse
#include <shared/LlmResponse.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ab01173674a8e2b8_58_new,"shared.LlmResponse","new",0xa9579597,"shared.LlmResponse.new","shared/ApiModels.hx",58,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_ab01173674a8e2b8_69_toJson,"shared.LlmResponse","toJson",0x7261c46c,"shared.LlmResponse.toJson","shared/ApiModels.hx",69,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_ab01173674a8e2b8_94_isSuccess,"shared.LlmResponse","isSuccess",0x7d0eab70,"shared.LlmResponse.isSuccess","shared/ApiModels.hx",94,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_ab01173674a8e2b8_98_isError,"shared.LlmResponse","isError",0x91839c35,"shared.LlmResponse.isError","shared/ApiModels.hx",98,0xfd6bed64)
HX_LOCAL_STACK_FRAME(_hx_pos_ab01173674a8e2b8_80_fromJson,"shared.LlmResponse","fromJson",0xbc07041b,"shared.LlmResponse.fromJson","shared/ApiModels.hx",80,0xfd6bed64)
namespace shared{

void LlmResponse_obj::__construct(::String content,::String status,int promptTokens,int completionTokens, ::Dynamic __o_processingTimeMs){
            		 ::Dynamic processingTimeMs = __o_processingTimeMs;
            		if (::hx::IsNull(__o_processingTimeMs)) processingTimeMs = 0;
            	HX_STACKFRAME(&_hx_pos_ab01173674a8e2b8_58_new)
HXLINE(  59)		this->content = content;
HXLINE(  60)		this->status = status;
HXLINE(  61)		this->promptTokens = promptTokens;
HXLINE(  62)		this->completionTokens = completionTokens;
HXLINE(  63)		this->totalTokens = (promptTokens + completionTokens);
HXLINE(  64)		this->timestamp = ::Date_obj::now()->getTime();
HXLINE(  65)		this->processingTimeMs = ( (Float)(processingTimeMs) );
            	}

Dynamic LlmResponse_obj::__CreateEmpty() { return new LlmResponse_obj; }

void *LlmResponse_obj::_hx_vtable = 0;

Dynamic LlmResponse_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LlmResponse_obj > _hx_result = new LlmResponse_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool LlmResponse_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6575ff45;
}

::String LlmResponse_obj::toJson(){
            	HX_STACKFRAME(&_hx_pos_ab01173674a8e2b8_69_toJson)
HXDLIN(  69)		 ::Dynamic replacer = null();
HXDLIN(  69)		::String space = null();
HXDLIN(  69)		return ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("timestamp",d6,d4,ce,a5),this->timestamp)
            			->setFixed(1,HX_("completionTokens",96,93,96,b5),this->completionTokens)
            			->setFixed(2,HX_("promptTokens",1e,b0,26,fc),this->promptTokens)
            			->setFixed(3,HX_("status",32,e7,fb,05),this->status)
            			->setFixed(4,HX_("content",39,8d,77,19),this->content)
            			->setFixed(5,HX_("processingTimeMs",06,5b,d5,3c),this->processingTimeMs)
            			->setFixed(6,HX_("totalTokens",3e,0a,1d,58),this->totalTokens)),replacer,space);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LlmResponse_obj,toJson,return )

bool LlmResponse_obj::isSuccess(){
            	HX_STACKFRAME(&_hx_pos_ab01173674a8e2b8_94_isSuccess)
HXDLIN(  94)		if ((this->status != HX_("success",c3,25,4e,b8))) {
HXDLIN(  94)			return (this->status == HX_("demo",23,59,66,42));
            		}
            		else {
HXDLIN(  94)			return true;
            		}
HXDLIN(  94)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LlmResponse_obj,isSuccess,return )

bool LlmResponse_obj::isError(){
            	HX_STACKFRAME(&_hx_pos_ab01173674a8e2b8_98_isError)
HXDLIN(  98)		return (this->status == HX_("error",c8,cb,29,73));
            	}


HX_DEFINE_DYNAMIC_FUNC0(LlmResponse_obj,isError,return )

 ::shared::LlmResponse LlmResponse_obj::fromJson(::String json){
            	HX_GC_STACKFRAME(&_hx_pos_ab01173674a8e2b8_80_fromJson)
HXLINE(  81)		 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,json)->doParse();
HXLINE(  82)		 ::shared::LlmResponse response =  ::shared::LlmResponse_obj::__alloc( HX_CTX ,( (::String)(data->__Field(HX_("content",39,8d,77,19),::hx::paccDynamic)) ),( (::String)(data->__Field(HX_("status",32,e7,fb,05),::hx::paccDynamic)) ),( (int)(data->__Field(HX_("promptTokens",1e,b0,26,fc),::hx::paccDynamic)) ),( (int)(data->__Field(HX_("completionTokens",96,93,96,b5),::hx::paccDynamic)) ),data->__Field(HX_("processingTimeMs",06,5b,d5,3c),::hx::paccDynamic));
HXLINE(  89)		response->timestamp = ( (Float)(data->__Field(HX_("timestamp",d6,d4,ce,a5),::hx::paccDynamic)) );
HXLINE(  90)		return response;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LlmResponse_obj,fromJson,return )


::hx::ObjectPtr< LlmResponse_obj > LlmResponse_obj::__new(::String content,::String status,int promptTokens,int completionTokens, ::Dynamic __o_processingTimeMs) {
	::hx::ObjectPtr< LlmResponse_obj > __this = new LlmResponse_obj();
	__this->__construct(content,status,promptTokens,completionTokens,__o_processingTimeMs);
	return __this;
}

::hx::ObjectPtr< LlmResponse_obj > LlmResponse_obj::__alloc(::hx::Ctx *_hx_ctx,::String content,::String status,int promptTokens,int completionTokens, ::Dynamic __o_processingTimeMs) {
	LlmResponse_obj *__this = (LlmResponse_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LlmResponse_obj), true, "shared.LlmResponse"));
	*(void **)__this = LlmResponse_obj::_hx_vtable;
	__this->__construct(content,status,promptTokens,completionTokens,__o_processingTimeMs);
	return __this;
}

LlmResponse_obj::LlmResponse_obj()
{
}

void LlmResponse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LlmResponse);
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(status,"status");
	HX_MARK_MEMBER_NAME(promptTokens,"promptTokens");
	HX_MARK_MEMBER_NAME(completionTokens,"completionTokens");
	HX_MARK_MEMBER_NAME(totalTokens,"totalTokens");
	HX_MARK_MEMBER_NAME(timestamp,"timestamp");
	HX_MARK_MEMBER_NAME(processingTimeMs,"processingTimeMs");
	HX_MARK_END_CLASS();
}

void LlmResponse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(status,"status");
	HX_VISIT_MEMBER_NAME(promptTokens,"promptTokens");
	HX_VISIT_MEMBER_NAME(completionTokens,"completionTokens");
	HX_VISIT_MEMBER_NAME(totalTokens,"totalTokens");
	HX_VISIT_MEMBER_NAME(timestamp,"timestamp");
	HX_VISIT_MEMBER_NAME(processingTimeMs,"processingTimeMs");
}

::hx::Val LlmResponse_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { return ::hx::Val( status ); }
		if (HX_FIELD_EQ(inName,"toJson") ) { return ::hx::Val( toJson_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		if (HX_FIELD_EQ(inName,"isError") ) { return ::hx::Val( isError_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { return ::hx::Val( timestamp ); }
		if (HX_FIELD_EQ(inName,"isSuccess") ) { return ::hx::Val( isSuccess_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalTokens") ) { return ::hx::Val( totalTokens ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"promptTokens") ) { return ::hx::Val( promptTokens ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"completionTokens") ) { return ::hx::Val( completionTokens ); }
		if (HX_FIELD_EQ(inName,"processingTimeMs") ) { return ::hx::Val( processingTimeMs ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LlmResponse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromJson") ) { outValue = fromJson_dyn(); return true; }
	}
	return false;
}

::hx::Val LlmResponse_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { status=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { timestamp=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalTokens") ) { totalTokens=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"promptTokens") ) { promptTokens=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"completionTokens") ) { completionTokens=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"processingTimeMs") ) { processingTimeMs=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LlmResponse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("status",32,e7,fb,05));
	outFields->push(HX_("promptTokens",1e,b0,26,fc));
	outFields->push(HX_("completionTokens",96,93,96,b5));
	outFields->push(HX_("totalTokens",3e,0a,1d,58));
	outFields->push(HX_("timestamp",d6,d4,ce,a5));
	outFields->push(HX_("processingTimeMs",06,5b,d5,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LlmResponse_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(LlmResponse_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsString,(int)offsetof(LlmResponse_obj,status),HX_("status",32,e7,fb,05)},
	{::hx::fsInt,(int)offsetof(LlmResponse_obj,promptTokens),HX_("promptTokens",1e,b0,26,fc)},
	{::hx::fsInt,(int)offsetof(LlmResponse_obj,completionTokens),HX_("completionTokens",96,93,96,b5)},
	{::hx::fsInt,(int)offsetof(LlmResponse_obj,totalTokens),HX_("totalTokens",3e,0a,1d,58)},
	{::hx::fsFloat,(int)offsetof(LlmResponse_obj,timestamp),HX_("timestamp",d6,d4,ce,a5)},
	{::hx::fsFloat,(int)offsetof(LlmResponse_obj,processingTimeMs),HX_("processingTimeMs",06,5b,d5,3c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LlmResponse_obj_sStaticStorageInfo = 0;
#endif

static ::String LlmResponse_obj_sMemberFields[] = {
	HX_("content",39,8d,77,19),
	HX_("status",32,e7,fb,05),
	HX_("promptTokens",1e,b0,26,fc),
	HX_("completionTokens",96,93,96,b5),
	HX_("totalTokens",3e,0a,1d,58),
	HX_("timestamp",d6,d4,ce,a5),
	HX_("processingTimeMs",06,5b,d5,3c),
	HX_("toJson",43,ad,21,7c),
	HX_("isSuccess",f9,a2,4c,bc),
	HX_("isError",7e,6f,af,0f),
	::String(null()) };

::hx::Class LlmResponse_obj::__mClass;

static ::String LlmResponse_obj_sStaticFields[] = {
	HX_("fromJson",b2,10,34,a4),
	::String(null())
};

void LlmResponse_obj::__register()
{
	LlmResponse_obj _hx_dummy;
	LlmResponse_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shared.LlmResponse",25,7e,31,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LlmResponse_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LlmResponse_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LlmResponse_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LlmResponse_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LlmResponse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LlmResponse_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shared
