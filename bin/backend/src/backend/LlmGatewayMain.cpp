// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_LlmGatewayMain
#include <backend/LlmGatewayMain.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_shared_LlmRequest
#include <shared/LlmRequest.h>
#endif
#ifndef INCLUDED_shared_LlmResponse
#include <shared/LlmResponse.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_18_main,"backend.LlmGatewayMain","main",0x5554227d,"backend.LlmGatewayMain.main","backend/LlmGatewayMain.hx",18,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_26_initializeGateway,"backend.LlmGatewayMain","initializeGateway",0xd40cfbd0,"backend.LlmGatewayMain.initializeGateway","backend/LlmGatewayMain.hx",26,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_45_startGatewayServer,"backend.LlmGatewayMain","startGatewayServer",0xaaaaf969,"backend.LlmGatewayMain.startGatewayServer","backend/LlmGatewayMain.hx",45,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_63_processIncomingRequests,"backend.LlmGatewayMain","processIncomingRequests",0x48e37615,"backend.LlmGatewayMain.processIncomingRequests","backend/LlmGatewayMain.hx",63,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_79_processLlmRequest,"backend.LlmGatewayMain","processLlmRequest",0x4f801f6d,"backend.LlmGatewayMain.processLlmRequest","backend/LlmGatewayMain.hx",79,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_134_callOpenRouterApi,"backend.LlmGatewayMain","callOpenRouterApi",0x0bc5b7e5,"backend.LlmGatewayMain.callOpenRouterApi","backend/LlmGatewayMain.hx",134,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_137_callOpenRouterApi,"backend.LlmGatewayMain","callOpenRouterApi",0x0bc5b7e5,"backend.LlmGatewayMain.callOpenRouterApi","backend/LlmGatewayMain.hx",137,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_109_callOpenRouterApi,"backend.LlmGatewayMain","callOpenRouterApi",0x0bc5b7e5,"backend.LlmGatewayMain.callOpenRouterApi","backend/LlmGatewayMain.hx",109,0x91485b33)
static const ::String _hx_array_data_baa69caa_9[] = {
	HX_("",00,00,00,00),
};
static const bool _hx_array_data_baa69caa_10[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_178_createDemoResponse,"backend.LlmGatewayMain","createDemoResponse",0xd35f3524,"backend.LlmGatewayMain.createDemoResponse","backend/LlmGatewayMain.hx",178,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_193_shutdown,"backend.LlmGatewayMain","shutdown",0x258658da,"backend.LlmGatewayMain.shutdown","backend/LlmGatewayMain.hx",193,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_12_boot,"backend.LlmGatewayMain","boot",0x4e196e76,"backend.LlmGatewayMain.boot","backend/LlmGatewayMain.hx",12,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_13_boot,"backend.LlmGatewayMain","boot",0x4e196e76,"backend.LlmGatewayMain.boot","backend/LlmGatewayMain.hx",13,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_14_boot,"backend.LlmGatewayMain","boot",0x4e196e76,"backend.LlmGatewayMain.boot","backend/LlmGatewayMain.hx",14,0x91485b33)
HX_LOCAL_STACK_FRAME(_hx_pos_160eb2cd40aa3158_15_boot,"backend.LlmGatewayMain","boot",0x4e196e76,"backend.LlmGatewayMain.boot","backend/LlmGatewayMain.hx",15,0x91485b33)
namespace backend{

void LlmGatewayMain_obj::__construct() { }

Dynamic LlmGatewayMain_obj::__CreateEmpty() { return new LlmGatewayMain_obj; }

void *LlmGatewayMain_obj::_hx_vtable = 0;

Dynamic LlmGatewayMain_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LlmGatewayMain_obj > _hx_result = new LlmGatewayMain_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LlmGatewayMain_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b1e84c0;
}

::String LlmGatewayMain_obj::openRouterApiKey;

::String LlmGatewayMain_obj::openRouterBaseUrl;

::String LlmGatewayMain_obj::defaultModel;

bool LlmGatewayMain_obj::isRunning;

 ::sys::thread::Mutex LlmGatewayMain_obj::requestMutex;

void LlmGatewayMain_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_18_main)
HXLINE(  19)		::haxe::Log_obj::trace(HX_("Starting Haxe C++ LLM Gateway...",34,4a,88,29),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),19,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("main",39,38,56,48)));
HXLINE(  21)		::backend::LlmGatewayMain_obj::requestMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
HXLINE(  22)		::backend::LlmGatewayMain_obj::initializeGateway();
HXLINE(  23)		::backend::LlmGatewayMain_obj::startGatewayServer();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LlmGatewayMain_obj,main,(void))

void LlmGatewayMain_obj::initializeGateway(){
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_26_initializeGateway)
HXLINE(  27)		::haxe::Log_obj::trace(HX_("Initializing LLM Gateway...",10,3a,cc,47),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),27,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("initializeGateway",94,00,eb,d6)));
HXLINE(  30)		::backend::LlmGatewayMain_obj::openRouterApiKey = ::Sys_obj::getEnv(HX_("OPENROUTER_API_KEY",8e,32,07,1f));
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		if (::hx::IsNotNull( ::backend::LlmGatewayMain_obj::openRouterApiKey )) {
HXLINE(  31)			_hx_tmp = (::backend::LlmGatewayMain_obj::openRouterApiKey == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  31)			_hx_tmp = true;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  32)			::haxe::Log_obj::trace(HX_("Warning: OPENROUTER_API_KEY not set. Using demo mode.",81,ec,89,6c),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),32,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("initializeGateway",94,00,eb,d6)));
HXLINE(  33)			::backend::LlmGatewayMain_obj::openRouterApiKey = HX_("demo-key",35,4a,1d,5c);
            		}
HXLINE(  37)		::String envModel = ::Sys_obj::getEnv(HX_("LLM_MODEL",57,68,c7,a2));
HXLINE(  38)		bool _hx_tmp1;
HXDLIN(  38)		if (::hx::IsNotNull( envModel )) {
HXLINE(  38)			_hx_tmp1 = (envModel != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  38)			_hx_tmp1 = false;
            		}
HXDLIN(  38)		if (_hx_tmp1) {
HXLINE(  39)			::backend::LlmGatewayMain_obj::defaultModel = envModel;
            		}
HXLINE(  42)		::haxe::Log_obj::trace((HX_("Gateway initialized with model: ",bd,74,b6,ea) + ::backend::LlmGatewayMain_obj::defaultModel),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),42,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("initializeGateway",94,00,eb,d6)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LlmGatewayMain_obj,initializeGateway,(void))

void LlmGatewayMain_obj::startGatewayServer(){
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_45_startGatewayServer)
HXLINE(  46)		::haxe::Log_obj::trace(HX_("Starting gateway server on port 8080...",7f,a1,4c,5d),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),46,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("startGatewayServer",25,20,11,2a)));
HXLINE(  49)		while(::backend::LlmGatewayMain_obj::isRunning){
HXLINE(  50)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  53)				::backend::LlmGatewayMain_obj::processIncomingRequests();
HXLINE(  56)				::Sys_obj::sleep(((Float)0.1));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(  57)					{
HXLINE(  57)						null();
            					}
HXDLIN(  57)					 ::Dynamic e = _g;
HXLINE(  58)					{
HXLINE(  58)						 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  58)						::String _hx_tmp1 = (HX_("Error in gateway server: ",e8,79,d6,f4) + ::Std_obj::string(e));
HXDLIN(  58)						_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),58,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("startGatewayServer",25,20,11,2a)));
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LlmGatewayMain_obj,startGatewayServer,(void))

void LlmGatewayMain_obj::processIncomingRequests(){
            	HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_63_processIncomingRequests)
HXLINE(  68)		 ::shared::LlmRequest sampleRequest =  ::shared::LlmRequest_obj::__alloc( HX_CTX ,HX_("Hello, this is a test message from the Haxe C++ backend",d4,cc,f2,a3),::backend::LlmGatewayMain_obj::defaultModel,null(),null());
HXLINE(  73)		 ::shared::LlmResponse response = ::backend::LlmGatewayMain_obj::processLlmRequest(sampleRequest);
HXLINE(  74)		if (::hx::IsNotNull( response )) {
HXLINE(  75)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  75)			::String _hx_tmp1 = ((HX_("Sample response processed: ",2b,42,1a,83) + response->content.substring(0,50)) + HX_("...",ee,0f,23,00));
HXDLIN(  75)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),75,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("processIncomingRequests",d9,65,8b,f2)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LlmGatewayMain_obj,processIncomingRequests,(void))

 ::shared::LlmResponse LlmGatewayMain_obj::processLlmRequest( ::shared::LlmRequest request){
            	HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_79_processLlmRequest)
HXLINE(  80)		::backend::LlmGatewayMain_obj::requestMutex->acquire();
HXLINE(  82)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  83)			::haxe::Log_obj::trace((HX_("Processing LLM request for model: ",27,55,8d,bf) + request->model),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),83,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("processLlmRequest",31,24,5e,52)));
HXLINE(  85)			if ((::backend::LlmGatewayMain_obj::openRouterApiKey == HX_("demo-key",35,4a,1d,5c))) {
HXLINE(  87)				 ::shared::LlmResponse result = ::backend::LlmGatewayMain_obj::createDemoResponse(request);
HXLINE(  88)				::backend::LlmGatewayMain_obj::requestMutex->release();
HXLINE(  89)				return result;
            			}
HXLINE(  93)			 ::shared::LlmResponse response = ::backend::LlmGatewayMain_obj::callOpenRouterApi(request);
HXLINE(  94)			::backend::LlmGatewayMain_obj::requestMutex->release();
HXLINE(  95)			return response;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  97)				{
HXLINE(  97)					null();
            				}
HXDLIN(  97)				 ::Dynamic e = _g;
HXLINE(  98)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  98)				::String _hx_tmp1 = (HX_("Error processing LLM request: ",0d,a0,01,b2) + ::Std_obj::string(e));
HXDLIN(  98)				_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),98,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("processLlmRequest",31,24,5e,52)));
HXLINE(  99)				::backend::LlmGatewayMain_obj::requestMutex->release();
HXLINE( 100)				return  ::shared::LlmResponse_obj::__alloc( HX_CTX ,(HX_("Error: Failed to process request - ",e5,29,1c,43) + ::Std_obj::string(e)),HX_("error",c8,cb,29,73),0,0,null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  82)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LlmGatewayMain_obj,processLlmRequest,return )

 ::shared::LlmResponse LlmGatewayMain_obj::callOpenRouterApi( ::shared::LlmRequest request){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,responseData) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_134_callOpenRouterApi)
HXLINE( 134)			responseData[0] = data;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1,::Array< bool >,hasError,::Array< ::String >,responseData) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_137_callOpenRouterApi)
HXLINE( 138)			::haxe::Log_obj::trace((HX_("HTTP Error: ",b6,17,5c,a8) + error),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),138,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("callOpenRouterApi",a9,bc,a3,0e)));
HXLINE( 139)			hasError[0] = true;
HXLINE( 140)			responseData[0] = error;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_109_callOpenRouterApi)
HXLINE( 110)		::String url = ((HX_("",00,00,00,00) + ::backend::LlmGatewayMain_obj::openRouterBaseUrl) + HX_("/chat/completions",0f,df,20,14));
HXLINE( 112)		 ::Dynamic requestBody =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("max_tokens",d5,7a,31,9d),1000)
            			->setFixed(1,HX_("model",a9,23,58,0c),request->model)
            			->setFixed(2,HX_("messages",cc,d8,fd,34),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("content",39,8d,77,19),request->message)
            				->setFixed(1,HX_("role",76,eb,ae,4b),HX_("user",4b,92,ad,4d)))))
            			->setFixed(3,HX_("temperature",34,b4,90,3c),((Float)0.7)));
HXLINE( 124)		 ::sys::Http http =  ::sys::Http_obj::__alloc( HX_CTX ,url);
HXLINE( 125)		http->addHeader(HX_("Authorization",d9,69,3c,31),(HX_("Bearer ",ff,ad,19,40) + ::backend::LlmGatewayMain_obj::openRouterApiKey));
HXLINE( 126)		http->addHeader(HX_("Content-Type",ce,69,5d,3c),HX_("application/json",87,d8,7f,4e));
HXLINE( 127)		http->addHeader(HX_("HTTP-Referer",c8,47,74,8a),HX_("https://github.com/your-repo",82,52,7d,64));
HXLINE( 128)		http->addHeader(HX_("X-Title",83,94,d8,ec),HX_("Haxe LLM Gateway",b7,13,ba,c6));
HXLINE( 130)		::Array< ::String > responseData = ::Array_obj< ::String >::fromData( _hx_array_data_baa69caa_9,1);
HXLINE( 131)		::Array< bool > hasError = ::Array_obj< bool >::fromData( _hx_array_data_baa69caa_10,1);
HXLINE( 133)		http->onData =  ::Dynamic(new _hx_Closure_0(responseData));
HXLINE( 137)		http->onError =  ::Dynamic(new _hx_Closure_1(hasError,responseData));
HXLINE( 143)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 144)			 ::Dynamic replacer = null();
HXDLIN( 144)			::String space = null();
HXDLIN( 144)			http->setPostData(::haxe::format::JsonPrinter_obj::print(requestBody,replacer,space));
HXLINE( 145)			http->request(true);
HXLINE( 147)			if (hasError->__get(0)) {
HXLINE( 148)				return  ::shared::LlmResponse_obj::__alloc( HX_CTX ,(HX_("API Error: ",a8,8e,3f,d4) + responseData->__get(0)),HX_("error",c8,cb,29,73),0,0,null());
            			}
HXLINE( 156)			 ::Dynamic parsedResponse =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,responseData->__get(0))->doParse();
HXLINE( 157)			::String content = ( (::String)( ::Dynamic( ::Dynamic(parsedResponse->__Field(HX_("choices",f2,b5,17,d9),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("content",39,8d,77,19),::hx::paccDynamic)) );
HXLINE( 158)			 ::Dynamic usage = parsedResponse->__Field(HX_("usage",21,5d,2f,aa),::hx::paccDynamic);
HXLINE( 160)			return  ::shared::LlmResponse_obj::__alloc( HX_CTX ,content,HX_("success",c3,25,4e,b8),( (int)(usage->__Field(HX_("prompt_tokens",d5,13,73,c0),::hx::paccDynamic)) ),( (int)(usage->__Field(HX_("completion_tokens",5d,39,ea,48),::hx::paccDynamic)) ),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 167)				{
HXLINE( 167)					null();
            				}
HXDLIN( 167)				 ::Dynamic e = _g;
HXLINE( 168)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 168)				::String _hx_tmp1 = (HX_("Exception calling OpenRouter API: ",c0,48,76,4b) + ::Std_obj::string(e));
HXDLIN( 168)				_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),168,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("callOpenRouterApi",a9,bc,a3,0e)));
HXLINE( 169)				return  ::shared::LlmResponse_obj::__alloc( HX_CTX ,(HX_("Exception: ",95,cc,ac,54) + ::Std_obj::string(e)),HX_("error",c8,cb,29,73),0,0,null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 143)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LlmGatewayMain_obj,callOpenRouterApi,return )

 ::shared::LlmResponse LlmGatewayMain_obj::createDemoResponse( ::shared::LlmRequest request){
            	HX_GC_STACKFRAME(&_hx_pos_160eb2cd40aa3158_178_createDemoResponse)
HXLINE( 179)		::String demoContent = HX_("Demo Response from Haxe C++ Gateway:\n\n",99,4e,71,ff);
HXLINE( 180)		demoContent = (demoContent + ((HX_("Your message: \"",82,c4,3a,4b) + request->message) + HX_("\"\n",a8,1d,00,00)));
HXLINE( 181)		demoContent = (demoContent + ((HX_("Model requested: ",7d,c4,9d,58) + request->model) + HX_("\n",0a,00,00,00)));
HXLINE( 182)		demoContent = (demoContent + ((HX_("Timestamp: ",dc,00,01,bb) + ::Std_obj::string(::Date_obj::now())) + HX_("\n\n",c0,08,00,00)));
HXLINE( 183)		demoContent = (demoContent + HX_("This is a simulated response. To use real LLM, set OPENROUTER_API_KEY environment variable.",e8,a3,32,a3));
HXLINE( 185)		return  ::shared::LlmResponse_obj::__alloc( HX_CTX ,demoContent,HX_("success",c3,25,4e,b8),50,100,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LlmGatewayMain_obj,createDemoResponse,return )

void LlmGatewayMain_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_193_shutdown)
HXLINE( 194)		::haxe::Log_obj::trace(HX_("Shutting down LLM Gateway...",1d,de,d5,fd),::hx::SourceInfo(HX_("src/backend/LlmGatewayMain.hx",08,c3,76,b7),194,HX_("backend.LlmGatewayMain",aa,9c,a6,ba),HX_("shutdown",96,fc,0b,6b)));
HXLINE( 195)		::backend::LlmGatewayMain_obj::isRunning = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LlmGatewayMain_obj,shutdown,(void))


LlmGatewayMain_obj::LlmGatewayMain_obj()
{
}

bool LlmGatewayMain_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isRunning") ) { outValue = ( isRunning ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultModel") ) { outValue = ( defaultModel ); return true; }
		if (HX_FIELD_EQ(inName,"requestMutex") ) { outValue = ( requestMutex ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"openRouterApiKey") ) { outValue = ( openRouterApiKey ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"openRouterBaseUrl") ) { outValue = ( openRouterBaseUrl ); return true; }
		if (HX_FIELD_EQ(inName,"initializeGateway") ) { outValue = initializeGateway_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"processLlmRequest") ) { outValue = processLlmRequest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"callOpenRouterApi") ) { outValue = callOpenRouterApi_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"startGatewayServer") ) { outValue = startGatewayServer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createDemoResponse") ) { outValue = createDemoResponse_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"processIncomingRequests") ) { outValue = processIncomingRequests_dyn(); return true; }
	}
	return false;
}

bool LlmGatewayMain_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"isRunning") ) { isRunning=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultModel") ) { defaultModel=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"requestMutex") ) { requestMutex=ioValue.Cast<  ::sys::thread::Mutex >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"openRouterApiKey") ) { openRouterApiKey=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"openRouterBaseUrl") ) { openRouterBaseUrl=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LlmGatewayMain_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo LlmGatewayMain_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &LlmGatewayMain_obj::openRouterApiKey,HX_("openRouterApiKey",b8,83,67,8f)},
	{::hx::fsString,(void *) &LlmGatewayMain_obj::openRouterBaseUrl,HX_("openRouterBaseUrl",eb,f9,8b,e8)},
	{::hx::fsString,(void *) &LlmGatewayMain_obj::defaultModel,HX_("defaultModel",28,5f,b3,c1)},
	{::hx::fsBool,(void *) &LlmGatewayMain_obj::isRunning,HX_("isRunning",35,eb,67,ef)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(void *) &LlmGatewayMain_obj::requestMutex,HX_("requestMutex",b0,41,2d,ac)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void LlmGatewayMain_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LlmGatewayMain_obj::openRouterApiKey,"openRouterApiKey");
	HX_MARK_MEMBER_NAME(LlmGatewayMain_obj::openRouterBaseUrl,"openRouterBaseUrl");
	HX_MARK_MEMBER_NAME(LlmGatewayMain_obj::defaultModel,"defaultModel");
	HX_MARK_MEMBER_NAME(LlmGatewayMain_obj::isRunning,"isRunning");
	HX_MARK_MEMBER_NAME(LlmGatewayMain_obj::requestMutex,"requestMutex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LlmGatewayMain_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LlmGatewayMain_obj::openRouterApiKey,"openRouterApiKey");
	HX_VISIT_MEMBER_NAME(LlmGatewayMain_obj::openRouterBaseUrl,"openRouterBaseUrl");
	HX_VISIT_MEMBER_NAME(LlmGatewayMain_obj::defaultModel,"defaultModel");
	HX_VISIT_MEMBER_NAME(LlmGatewayMain_obj::isRunning,"isRunning");
	HX_VISIT_MEMBER_NAME(LlmGatewayMain_obj::requestMutex,"requestMutex");
};

#endif

::hx::Class LlmGatewayMain_obj::__mClass;

static ::String LlmGatewayMain_obj_sStaticFields[] = {
	HX_("openRouterApiKey",b8,83,67,8f),
	HX_("openRouterBaseUrl",eb,f9,8b,e8),
	HX_("defaultModel",28,5f,b3,c1),
	HX_("isRunning",35,eb,67,ef),
	HX_("requestMutex",b0,41,2d,ac),
	HX_("main",39,38,56,48),
	HX_("initializeGateway",94,00,eb,d6),
	HX_("startGatewayServer",25,20,11,2a),
	HX_("processIncomingRequests",d9,65,8b,f2),
	HX_("processLlmRequest",31,24,5e,52),
	HX_("callOpenRouterApi",a9,bc,a3,0e),
	HX_("createDemoResponse",e0,5b,c5,52),
	HX_("shutdown",96,fc,0b,6b),
	::String(null())
};

void LlmGatewayMain_obj::__register()
{
	LlmGatewayMain_obj _hx_dummy;
	LlmGatewayMain_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.LlmGatewayMain",aa,9c,a6,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LlmGatewayMain_obj::__GetStatic;
	__mClass->mSetStaticField = &LlmGatewayMain_obj::__SetStatic;
	__mClass->mMarkFunc = LlmGatewayMain_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LlmGatewayMain_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< LlmGatewayMain_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LlmGatewayMain_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LlmGatewayMain_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LlmGatewayMain_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LlmGatewayMain_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_12_boot)
HXDLIN(  12)		openRouterApiKey = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_13_boot)
HXDLIN(  13)		openRouterBaseUrl = HX_("https://openrouter.ai/api/v1",4b,3e,7b,0b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_14_boot)
HXDLIN(  14)		defaultModel = HX_("openai/gpt-3.5-turbo",8c,98,37,79);
            	}
{
            	HX_STACKFRAME(&_hx_pos_160eb2cd40aa3158_15_boot)
HXDLIN(  15)		isRunning = true;
            	}
}

} // end namespace backend
