// Generated by Haxe 4.3.7
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var shared_LlmRequest = function(message,model,temperature,maxTokens) {
	if(maxTokens == null) {
		maxTokens = 1000;
	}
	if(temperature == null) {
		temperature = 0.7;
	}
	this.message = message;
	this.model = model;
	this.temperature = temperature;
	this.maxTokens = maxTokens;
	this.timestamp = new Date().getTime();
};
shared_LlmRequest.__name__ = true;
shared_LlmRequest.fromJson = function(json) {
	var data = JSON.parse(json);
	var request = new shared_LlmRequest(data.message,data.model,data.temperature,data.maxTokens);
	request.timestamp = data.timestamp;
	return request;
};
shared_LlmRequest.prototype = {
	toJson: function() {
		return JSON.stringify({ message : this.message, model : this.model, temperature : this.temperature, maxTokens : this.maxTokens, timestamp : this.timestamp});
	}
};
var shared_LlmResponse = function(content,status,promptTokens,completionTokens,processingTimeMs) {
	if(processingTimeMs == null) {
		processingTimeMs = 0;
	}
	this.content = content;
	this.status = status;
	this.promptTokens = promptTokens;
	this.completionTokens = completionTokens;
	this.totalTokens = promptTokens + completionTokens;
	this.timestamp = new Date().getTime();
	this.processingTimeMs = processingTimeMs;
};
shared_LlmResponse.__name__ = true;
shared_LlmResponse.fromJson = function(json) {
	var data = JSON.parse(json);
	var response = new shared_LlmResponse(data.content,data.status,data.promptTokens,data.completionTokens,data.processingTimeMs);
	response.timestamp = data.timestamp;
	return response;
};
shared_LlmResponse.prototype = {
	toJson: function() {
		return JSON.stringify({ content : this.content, status : this.status, promptTokens : this.promptTokens, completionTokens : this.completionTokens, totalTokens : this.totalTokens, timestamp : this.timestamp, processingTimeMs : this.processingTimeMs});
	}
	,isSuccess: function() {
		if(this.status != "success") {
			return this.status == "demo";
		} else {
			return true;
		}
	}
};
var shared_GatewayConfig = function(apiKey,baseUrl,defaultModel,timeout,maxRetries) {
	if(maxRetries == null) {
		maxRetries = 3;
	}
	if(timeout == null) {
		timeout = 30000;
	}
	this.apiKey = apiKey;
	this.baseUrl = baseUrl;
	this.defaultModel = defaultModel;
	this.timeout = timeout;
	this.maxRetries = maxRetries;
};
shared_GatewayConfig.__name__ = true;
shared_GatewayConfig.prototype = {
	toJson: function() {
		return JSON.stringify({ apiKey : "[REDACTED]", baseUrl : this.baseUrl, defaultModel : this.defaultModel, timeout : this.timeout, maxRetries : this.maxRetries});
	}
};
var shared_LlmModel = $hxEnums["shared.LlmModel"] = { __ename__:true,__constructs__:null
	,GPT35Turbo: {_hx_name:"GPT35Turbo",_hx_index:0,__enum__:"shared.LlmModel",toString:$estr}
	,GPT4: {_hx_name:"GPT4",_hx_index:1,__enum__:"shared.LlmModel",toString:$estr}
	,GPT4Turbo: {_hx_name:"GPT4Turbo",_hx_index:2,__enum__:"shared.LlmModel",toString:$estr}
	,Claude3Haiku: {_hx_name:"Claude3Haiku",_hx_index:3,__enum__:"shared.LlmModel",toString:$estr}
	,Claude3Sonnet: {_hx_name:"Claude3Sonnet",_hx_index:4,__enum__:"shared.LlmModel",toString:$estr}
	,Claude3Opus: {_hx_name:"Claude3Opus",_hx_index:5,__enum__:"shared.LlmModel",toString:$estr}
	,Llama2_70B: {_hx_name:"Llama2_70B",_hx_index:6,__enum__:"shared.LlmModel",toString:$estr}
	,Mixtral8x7B: {_hx_name:"Mixtral8x7B",_hx_index:7,__enum__:"shared.LlmModel",toString:$estr}
	,Custom: ($_=function(name) { return {_hx_index:8,name:name,__enum__:"shared.LlmModel",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["name"],$_)
};
shared_LlmModel.__constructs__ = [shared_LlmModel.GPT35Turbo,shared_LlmModel.GPT4,shared_LlmModel.GPT4Turbo,shared_LlmModel.Claude3Haiku,shared_LlmModel.Claude3Sonnet,shared_LlmModel.Claude3Opus,shared_LlmModel.Llama2_70B,shared_LlmModel.Mixtral8x7B,shared_LlmModel.Custom];
var shared_LlmModelHelper = function() { };
shared_LlmModelHelper.__name__ = true;
shared_LlmModelHelper.toString = function(model) {
	switch(model._hx_index) {
	case 0:
		return "openai/gpt-3.5-turbo";
	case 1:
		return "openai/gpt-4";
	case 2:
		return "openai/gpt-4-turbo";
	case 3:
		return "anthropic/claude-3-haiku";
	case 4:
		return "anthropic/claude-3-sonnet";
	case 5:
		return "anthropic/claude-3-opus";
	case 6:
		return "meta-llama/llama-2-70b-chat";
	case 7:
		return "mistralai/mixtral-8x7b-instruct";
	case 8:
		var name = model.name;
		return name;
	}
};
shared_LlmModelHelper.fromString = function(modelStr) {
	switch(modelStr) {
	case "anthropic/claude-3-haiku":
		return shared_LlmModel.Claude3Haiku;
	case "anthropic/claude-3-opus":
		return shared_LlmModel.Claude3Opus;
	case "anthropic/claude-3-sonnet":
		return shared_LlmModel.Claude3Sonnet;
	case "meta-llama/llama-2-70b-chat":
		return shared_LlmModel.Llama2_70B;
	case "mistralai/mixtral-8x7b-instruct":
		return shared_LlmModel.Mixtral8x7B;
	case "openai/gpt-3.5-turbo":
		return shared_LlmModel.GPT35Turbo;
	case "openai/gpt-4":
		return shared_LlmModel.GPT4;
	case "openai/gpt-4-turbo":
		return shared_LlmModel.GPT4Turbo;
	default:
		return shared_LlmModel.Custom(modelStr);
	}
};
var shared_SharedMain = function() { };
shared_SharedMain.__name__ = true;
shared_SharedMain.main = function() {
	console.log("src/shared/SharedMain.hx:11:","Shared library initialized");
	shared_SharedMain.testApiModels();
};
shared_SharedMain.testApiModels = function() {
	console.log("src/shared/SharedMain.hx:18:","Testing shared API models...");
	var request = new shared_LlmRequest("Hello, world!","openai/gpt-3.5-turbo");
	var requestJson = request.toJson();
	console.log("src/shared/SharedMain.hx:23:","Request JSON: " + requestJson);
	var parsedRequest = shared_LlmRequest.fromJson(requestJson);
	console.log("src/shared/SharedMain.hx:26:","Parsed request message: " + parsedRequest.message);
	var response = new shared_LlmResponse("Hello! How can I help you?","success",10,15);
	var responseJson = response.toJson();
	console.log("src/shared/SharedMain.hx:31:","Response JSON: " + responseJson);
	var parsedResponse = shared_LlmResponse.fromJson(responseJson);
	console.log("src/shared/SharedMain.hx:34:","Parsed response content: " + parsedResponse.content);
	console.log("src/shared/SharedMain.hx:35:","Response is success: " + Std.string(parsedResponse.isSuccess()));
	var model = shared_LlmModel.GPT35Turbo;
	var modelString = shared_LlmModelHelper.toString(model);
	console.log("src/shared/SharedMain.hx:40:","Model string: " + modelString);
	var parsedModel = shared_LlmModelHelper.fromString(modelString);
	console.log("src/shared/SharedMain.hx:43:","Parsed model: " + Std.string(parsedModel));
	var config = new shared_GatewayConfig("test-api-key","https://openrouter.ai/api/v1","openai/gpt-3.5-turbo");
	var configJson = config.toJson();
	console.log("src/shared/SharedMain.hx:52:","Config JSON: " + configJson);
	console.log("src/shared/SharedMain.hx:54:","Shared API models test completed successfully!");
};
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
shared_SharedMain.main();
})({});
